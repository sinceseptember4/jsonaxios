{"version":3,"sources":["components/UserCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UserCard","props","user","style","border","borderRadius","padding","margin","name","email","address","App","useState","UserProfiles","setUserProfiles","loading","setLoding","error","setError","className","onClick","axios","get","then","res","data","map","id","username","city","suite","street","catch","finally","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2NAMaA,EAAuB,SAACC,GACnC,IAAQC,EAASD,EAATC,KAQR,OACE,qBAAKC,MAPO,CACZC,OAAQ,iBACRC,aAAc,MACdC,QAAS,SACTC,OAAQ,OAGR,SACE,+BACE,8CACA,6BAAKL,EAAKM,OACV,oDACA,6BAAKN,EAAKO,QACV,8CACA,6BAAKP,EAAKQ,gB,MChBH,SAASC,IACtB,MAAwCC,mBAA6B,IAArE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA6BF,oBAAS,GAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAwBA,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQC,QAzBM,WAChBJ,GAAU,GACVE,GAAS,GAETG,IACGC,IAAiB,8CACjBC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAAIC,KAAKC,KAAI,SAACxB,GAAD,MAAW,CACnCyB,GAAIzB,EAAKyB,GACTnB,KAAK,GAAD,OAAKN,EAAKM,KAAV,YAAkBN,EAAK0B,SAAvB,KACJnB,MAAOP,EAAKO,MACZC,QAAQ,GAAD,OAAKR,EAAKQ,QAAQmB,MAAlB,OAAyB3B,EAAKQ,QAAQoB,OAAtC,OAA8C5B,EAAKQ,QAAQqB,YAEpEjB,EAAgBW,MAEjBO,OAAM,WACLd,GAAS,MAEVe,SAAQ,WACPjB,GAAU,OAMZ,kDACA,uBACCC,EACC,mBAAGd,MAAO,CAAE+B,MAAO,OAAnB,4FACEnB,EACF,2CAEA,mCACGF,EAAaa,KAAI,SAACxB,GAAD,OAChB,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKyB,YC3ChC,IAYeQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,aAAD,UACE,cAACjC,EAAD,MAEFkC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.a3ace52b.chunk.js","sourcesContent":["import { UserProfile } from \"../types/userProfiles\";\nimport { VFC } from \"react\";\ntype Props = {\n  user: UserProfile;\n};\n\nexport const UserCard: VFC<Props> = (props) => {\n  const { user } = props;\n\n  const style = {\n    border: \"solid 1px #ccc\",\n    borderRadius: \"8px\",\n    padding: \"0 16px\",\n    margin: \"8px\"\n  };\n  return (\n    <div style={style}>\n      <dl>\n        <dt>名前</dt>\n        <dd>{user.name}</dd>\n        <dt>メール</dt>\n        <dd>{user.email}</dd>\n        <dt>住所</dt>\n        <dd>{user.address}</dd>\n      </dl>\n    </div>\n  );\n};\n","import axios from \"axios\";\nimport { useState } from \"react\";\nimport { UserCard } from \"./components/UserCard\";\nimport \"./styles.css\";\nimport { User } from \"./types/api/user\";\nimport { UserProfile } from \"./types/userProfiles\";\n\nexport default function App() {\n  const [UserProfiles, setUserProfiles] = useState<Array<UserProfile>>([]);\n  const [loading, setLoding] = useState(false);\n  const [error, setError] = useState(false);\n  const FetchUser = () => {\n    setLoding(true);\n    setError(false);\n\n    axios\n      .get<Array<User>>(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => {\n        const data = res.data.map((user) => ({\n          id: user.id,\n          name: `${user.name}(${user.username})`,\n          email: user.email,\n          address: `${user.address.city}${user.address.suite}${user.address.street}`\n        }));\n        setUserProfiles(data);\n      })\n      .catch(() => {\n        setError(true);\n      })\n      .finally(() => {\n        setLoding(false);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={FetchUser}>データー取得</button>\n      <br />\n      {error ? (\n        <p style={{ color: \"red\" }}>データの取得に失敗しました</p>\n      ) : loading ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          {UserProfiles.map((user) => (\n            <UserCard key={user.id} user={user} />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}